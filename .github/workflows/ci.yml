name: CI - Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Generate Prisma Client
      working-directory: ./backend
      run: npx prisma generate

    - name: Run tests
      working-directory: ./backend
      env:
        NODE_ENV: test
        DATABASE_URL: mongodb://test:test@localhost:27017/test_db?authSource=admin
        JWT_SECRET: test_jwt_secret_key_with_minimum_32_characters_for_testing
      run: npm test

    - name: Run test coverage
      working-directory: ./backend
      env:
        NODE_ENV: test
        DATABASE_URL: mongodb://test:test@localhost:27017/test_db?authSource=admin
        JWT_SECRET: test_jwt_secret_key_with_minimum_32_characters_for_testing
      run: npm run test:coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        directory: ./backend/coverage
        flags: backend
        fail_ci_if_error: false

  build-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build check
      working-directory: ./frontend
      run: npm run build

  summary:
    needs: [test-backend, build-frontend]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check results
      run: |
        if [ "${{ needs.test-backend.result }}" == "failure" ] || [ "${{ needs.build-frontend.result }}" == "failure" ]; then
          echo "❌ CI failed!"
          exit 1
        else
          echo "✅ All tests passed!"
        fi

